# -*- coding: utf-8 -*-
"""HW2_Perception and intelligence

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OIhi14ti_5hdirP4sh_P8p5tI7WYY1Eu
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
from scipy.fft import fft 
# %matplotlib inline

"Problem 1"

sampling_frequency = 1000;
t_initial = 0;
t_final = 0.1;
time = np.linspace(t_initial,t_final,sampling_frequency);
print(time)

signal = 2 + (3*(np.cos(500*np.pi*time))) + (2*(np.cos(1000*np.pi*time))) + (3*(np.sin(2000*np.pi*time)))
print(signal)

"Visualizing signal in time-domain"

plt.plot(time, signal)
plt.title("Signal visualization in time-domain")
plt.xlabel("Time (s)")
plt.ylabel("Amplitude")
plt.show()

"Visualizing its Fast fourier transoform in frequency-domain"

#Fourier transform using fft function in scipy library.
frequency = np.abs(fft(signal)) 

plt.plot(frequency)
plt.title("Signal visualization in frequency-domain")
plt.xlabel("Frequency (HZ)")
plt.ylabel("Amplitude")
plt.show()

"Problem 2"

sample_frequency = 1*10**6;
start_time = 0;
end_time = 1;
time_data = np.linspace(start_time,end_time,sample_frequency);
limit = (len(time_data)/2);
discrete_signal = [];

count = 0;
while(count < limit):
    discrete_signal.append(0);
    count += 1;

count = 0;
while(count < limit):
    discrete_signal.append(1);
    count += 1;

print(len(time_data))
print(len(discrete_signal))

"Visualizing the discrete signal in time-domain"

plt.plot(time_data, discrete_signal)
plt.title("Discrete signal visualization in time-domain")
plt.xlabel("Time (ms)")
plt.ylabel("Amplitude")
plt.show()

"Visualizing the discrete signal in frequency-domain"

#Fourier transform using fft function in scipy library.
freq = np.abs(fft(discrete_signal))

plt.plot(freq)
plt.title("Discrete signal visualization in frequency-domain")
plt.xlabel("Frequency (HZ)")
plt.ylabel("Amplitude")
plt.show()

# Problem 3 
# Visualization of clean and noisy signal

mean = 0;
variance = 1;
std_deviation = np.sqrt(variance);

time = np.arange(500);
clean_signal = []
for i in np.arange(len(time)):
  clean_signal.append(20)
print(len(clean_signal))  

noise = np.random.normal(mean, std_deviation, len(clean_signal))
noisy_signal = clean_signal + noise
print(len(noisy_signal))

plt.plot(time,noisy_signal,time,clean_signal)
plt.title("Visualization of Clean signal and Noisy signal in time-domain ")
plt.xlabel("Time (s)")
plt.ylabel("Amplitude")
plt.show()

#Fourier transform using fft function in scipy library.
noisy_freq = np.abs(fft(noisy_signal))

plt.plot(noisy_freq)
plt.title("visualization of noisy signal in frequency-domain")
plt.xlabel("Frequency (HZ)")
plt.ylabel("Amplitude")
plt.show()

" Convolution using Kernel size of 3 and 11"

# Creating a function to perform convolution
def convolution(signal, kernel):
  signal_size = np.size(signal);
  kernel_size = np.size(kernel);
  conv_output = np.zeros(signal_size + kernel_size - 1)
  for i in np.arange(signal_size):
    for j in np.arange(kernel_size):
      conv_output[i+j] += signal[i]*kernel[j];
  return conv_output;

# Defining kernel values
kernel_3 = [0.27901,0.44198,0.27901];
kernel_11 = [0.000003,0.000229,0.005977,0.060598,0.24173,0.382925,0.24173,0.060598,0.005977,0.000229,0.000003];

# Convolution using Kernel 3 on the noisy signal
conv_kernel3 = convolution(noisy_signal, kernel_3)
plt.plot(time,conv_kernel3[1:501],time,clean_signal)
plt.title('Convolution using Kernel 3 on the noisy signal')
plt.ylabel('Amplitude')
plt.xlabel('Time')
plt.show()

# Convolution using Kernel 11 on the noisy signal
conv_kernel11 = convolution(noisy_signal, kernel_11)
plt.plot(time,conv_kernel11[5:505],time,clean_signal)
plt.title('Convolution using Kernel 11 on the noisy signal')
plt.ylabel('Amplitude')
plt.xlabel('Time')
plt.show()